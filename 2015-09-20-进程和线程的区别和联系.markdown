# 进程和线程的区别和联系

##什么是进程(Process)，什么是线程(Thread)
**进程**，是并发执行的程序在执行过程中**分配和管理资源的基本单位**，是一个动态概念，竟争计算机系统资源的基本单位。每一个进程都有一个自己的地址空间，即进程空间或（虚空间）。进程空间的大小 只与处理机的位数有关，一个 16 位长处理机的进程空间大小为 216 ，而 32 位处理机的进程空间大小为 232 。进程至少有 5 种基本状态，它们是：

* 初始态，
* 执行态，
* 等待状态，
* 就绪状态，
* 终止状态。
 
**线程**，在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引进了。线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为轻权进程或轻量级进程，**也是 CPU 调度的一个基本单位**。
 
##进程和线程的区别。
 
进程的执行过程是线状的，尽管中间会发生中断或暂停，但该进程所拥有的资源只为该线状执行过程服务。一旦发生进程上下文切换，这些资源都是要被保护起来的。这是进程宏观上的执行过程。而进程又可有单线程进程与多线程进程两种。我们知道，进程有一个进程控制块`PCB` ，相关程序段 和 该程序段对其进行操作的数据结构集这三部分，单线程进程的执行过程在宏观上是线性的，微观上也只有单一的执行过程；而多线程进程在宏观上的执行过程同样为线性的，但微观上却可以有多个执行操作（线程），如不同代码片段以及相关的数据结构集。线程的改变只代表了CPU执行过程的改变，而没有发生进程所拥有的资源变化。出了CPU之外，计算机内的软硬件资源的分配与线程无关，线程只能共享它所属进程的资源。与进程控制表和 PCB 相似，每个线程也有自己的线程控制表TCB，而这个TCB中所保存的线程状态信息则要比PCB表少得多，这些信息主要是相关指针用堆栈（系统栈和用户栈），寄存器中的状态数据。进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。
 
线程可以有效地提高系统的执行效率，但并不是在所有计算机系统中都是适用的，如某些很少做进程调度和切换的实时系统。**使用线程的好处是有多个任务需要处理机处理时，减少处理机的切换时间**；而且，线程的创建和结束所需要的系统开销也比进程的创建和结束要小得多。最适用使用线程的系统是多处理机系统和网络系统或分布式系统。
 
----------------------------------
##其他
 
1. 线程的执行特性。
 
    线程只有 3 个基本状态：
    * 就绪，
    * 执行，
    * 阻塞。

    线程存在 5 种基本操作来切换线程的状态：
    * 派生，
    * 阻塞，
    * 激活，
    * 调度，
    * 结束。
 
2. 进程通信。
    单机系统中进程通信有4种形式：
    * 主从式，
    * 会话式，
    * 消息或邮箱机制，
    * 共享存储区方式。
 
    主从式典型例子：终端控制进程和终端进程。
    会话式典型例子：用户进程与磁盘管理进程之间的通信。 

3. 协程：
上面提到的进程和线程都是由**OS来控制其切换的**,使用的是**抢占式**。**协程是用户层面的**东东,他的切换是由用户自己来决定的,你可以想想用户创建了几个线程,然后每个线程都是循环按照指定的任务清单顺序完成不同的任务,当任务被堵塞的时候执行下一个任务,当恢复的时候再回来执行这个任务,任务之间的切换只需要保存每个任务的上下文内容,就像直接操作栈一样的,这样就完全没有内核切换的开销,所以上下文的切换非常快.另外协程还需要保证是非堵塞的且没有相互依赖,协程基本上不能同步通讯,多采用一步的消息通讯,效率比较高.比较具有代表性的是golang里面goroutine.





